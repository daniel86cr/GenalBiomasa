package com.dina.genasoft.db.mapper;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.dina.genasoft.db.entity.TCompras;

public interface TComprasMapper {

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    int insert(TCompras record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    int insertSelective(TCompras record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    TCompras selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    int updateByPrimaryKeySelective(TCompras record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table t_compras
     * @mbg.generated  Sun Nov 07 18:44:05 CET 2021
     */
    int updateByPrimaryKey(TCompras record);

    /**
     * MÃ©todo para crear la compra y obtener el ID del registro creado.
     * @param map Los datos de la compra a crear.
     */
    public void insertRecord(Map<String, Object> map);

    TCompras obtenerCompraPorIdExterno(@Param("idExterno") Double idExterno);

    TCompras obtenerCompraPorLote(@Param("lote") String lote);

    TCompras obtenerCompraPorLotePartida(@Param("lote") String lote, @Param("partida") String partida);

    TCompras obtenerCompraPorAlbaranLote(@Param("albaran") String albaran, @Param("lote") String lote);

    List<TCompras> obtenerTodasCompras();

    List<TCompras> obtenerTodasCompras2();

    List<TCompras> obtenerComprasIds(@Param("list") List<Integer> ids);

    int cerrarComprasKgsDisponiblesCero(@Param("list") List<Integer> ids);

    int eliminarComprasIds(@Param("list") List<Integer> ids);

    List<TCompras> obtenerComprasParametros(@Param("producto") String producto, @Param("calidad") String calidad, @Param("origen") String origen, @Param("ggn") String ggn, @Param("f1") Date f1, @Param("f2") Date f2, @Param("origen2") String origen2,
            @Param("calidad2") String calidad2);

    int insertarComprasMasivo(@Param("list") List<TCompras> ids);

    List<TCompras> obtenerComprasAlbaranesLotesPartidas(@Param("list") List<String> lAlbaranes, @Param("list2") List<String> lLotes, @Param("list3") List<String> lPartidas);

    List<TCompras> obtenerComprasParametros2(@Param("f1") Date f1, @Param("f2") Date f2, @Param("list") List<String> lVariedades, @Param("origen") String origen, @Param("calidad") String calidad);

    List<TCompras> obtenerComprasBalanceMasasTodosGroupBy();

    List<TCompras> obtenerComprasCertificacionNacionalImportacion();

    List<TCompras> obtenerComprasGlobalGap();

    List<Integer> obtenerFechasComprasDisponibles();

}